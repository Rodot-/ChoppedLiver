#!/usr/bin/env python3

'''
master_crop - create binary mask file of largest area rectangle encompassing bitwise and of input boolean masks.

Author: Jack O'Brien
Created: 20190405
Modified: 20190410
'''
import sys
import getopt
import os

import numpy as np
import operator
from astropy.io import fits

def get_mask_shape(mask):
	'''get the shape of the rectangular mask'''

	rows, cols = np.where(mask)
	shape = (1+rows.max() - rows.min(), 1+cols.max() - cols.min())
	return shape

def apply_mask(mask, images, replace='crop'):
	'''apply the rectangular mask to
	an iterable of images (numpy arrays)
	'''

	if replace == 'crop':
		shape = get_mask_shape(mask)
		mask = np.where(mask) # a bit faster
		for image in images:
			yield image[mask].reshape(shape)

	elif replace == 'background':
		for image in images:
			bkg = np.median(image[mask]) # estimate the image background
			image[~mask] = bkg
			return image

	elif type(replace) in (int, float):
		for image in images:
			image[~mask] = replace
			yield image	

def load_files(*filenames):
	for filename in filenames:
		with fits.open(filename) as f:
			yield np.array(f[0].data)

def usage():

	msg = """apply_square_mask -o OUTDIR -m MASKFILE [-s SUBSITUTION] IMAGEFILE
	
-o OUTDIR             Name of Output Directory
-m MASKFILE           Name of Square Mask File to Apply
-s SUBSTITUTION       Method of mask area subsitution
                      Options are as follows:
                         crop - (default) crop the image to the area of the mask
                         background - use a median image background value
                         [floating point litteral] - use provided value
-h                    This Message
"""
	print(msg)
	exit(0)

def main():

	opts, args = getopt.getopt(sys.argv[1:], 'o:m:s:h')
	opts = dict(opts)

	if '-h' in opts:
		usage()

	assert len(args), "Please Provide Image(s) to Apply mask to"
	assert '-o' in opts, "Please Provide and Output Filename (-o OUT)"

	imagenames = args
	outdir = opts['-o']
	maskfile = opts['-m']
	method = 'crop'
	if '-s' in opts:
		method = opts['-s']
		try:
			method = float(method)
		except:
			pass # isn't a float or int

	data = load_files(*imagenames)
	with fits.open(maskfile) as f:
		mask = np.array(f[0].data).astype(np.bool)
		for fname, new_data in zip(imagenames, apply_mask(mask, data, method)):
			outfile = os.path.join(outdir, os.path.basename(fname))
			hdu = fits.PrimaryHDU(new_data)
			hdu.writeto(outfile)

if __name__ == '__main__':

	main()
